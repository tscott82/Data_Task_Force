{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1f06b671-4fb7-4a84-bfbb-804ea313c57e",
   "metadata": {},
   "source": [
    "# Data Task Force\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cedba518-b7a0-486f-a74d-495b3b41bbc3",
   "metadata": {},
   "source": [
    "## Initialization and Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "82c929b3-71f2-4643-92b4-c28bc3fc5f59",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c33b87c-b77b-459d-97ed-a24d9369ff76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>8.4</td>\n",
       "      <td>927000.0</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>146.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>5.8</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1200000.0</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>538375067.0</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>7.7</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>7.3</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name rating      genre  year  \\\n",
       "0                                     The Shining      R      Drama  1980   \n",
       "1                                 The Blue Lagoon      R  Adventure  1980   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     PG     Action  1980   \n",
       "3                                       Airplane!     PG     Comedy  1980   \n",
       "4                                      Caddyshack      R     Comedy  1980   \n",
       "\n",
       "                        released  score      votes         director  \\\n",
       "0  June 13, 1980 (United States)    8.4   927000.0  Stanley Kubrick   \n",
       "1   July 2, 1980 (United States)    5.8    65000.0   Randal Kleiser   \n",
       "2  June 20, 1980 (United States)    8.7  1200000.0   Irvin Kershner   \n",
       "3   July 2, 1980 (United States)    7.7   221000.0     Jim Abrahams   \n",
       "4  July 25, 1980 (United States)    7.3   108000.0     Harold Ramis   \n",
       "\n",
       "                    writer            star         country      budget  \\\n",
       "0             Stephen King  Jack Nicholson  United Kingdom  19000000.0   \n",
       "1  Henry De Vere Stacpoole  Brooke Shields   United States   4500000.0   \n",
       "2           Leigh Brackett     Mark Hamill   United States  18000000.0   \n",
       "3             Jim Abrahams     Robert Hays   United States   3500000.0   \n",
       "4       Brian Doyle-Murray     Chevy Chase   United States   6000000.0   \n",
       "\n",
       "         gross             company  runtime  \n",
       "0   46998772.0        Warner Bros.    146.0  \n",
       "1   58853106.0   Columbia Pictures    104.0  \n",
       "2  538375067.0           Lucasfilm    124.0  \n",
       "3   83453539.0  Paramount Pictures     88.0  \n",
       "4   39846344.0      Orion Pictures     98.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('movies.csv')\n",
    "\n",
    "pd.set_option('display.max_columns', None) # show all columns \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7c794c82-477b-4e7e-b3d3-9fbccb4c94ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['name', 'rating', 'genre', 'year', 'released', 'score', 'votes',\n",
       "       'director', 'writer', 'star', 'country', 'budget', 'gross', 'company',\n",
       "       'runtime'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# see the headers/column names \n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "438d59c4-28dd-4785-a8ad-65b6cc451422",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7668 entries, 0 to 7667\n",
      "Data columns (total 15 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   name      7668 non-null   object \n",
      " 1   rating    7591 non-null   object \n",
      " 2   genre     7668 non-null   object \n",
      " 3   year      7668 non-null   int64  \n",
      " 4   released  7666 non-null   object \n",
      " 5   score     7665 non-null   float64\n",
      " 6   votes     7665 non-null   float64\n",
      " 7   director  7668 non-null   object \n",
      " 8   writer    7665 non-null   object \n",
      " 9   star      7667 non-null   object \n",
      " 10  country   7665 non-null   object \n",
      " 11  budget    5497 non-null   float64\n",
      " 12  gross     7479 non-null   float64\n",
      " 13  company   7651 non-null   object \n",
      " 14  runtime   7664 non-null   float64\n",
      "dtypes: float64(5), int64(1), object(9)\n",
      "memory usage: 898.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# see the column's info\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3994cae-ef86-42cf-a09c-19149541844a",
   "metadata": {},
   "source": [
    "## Aggregate Features \n",
    "\n",
    "##### In this section we will add several columns to our dataset. These new columns will be calculated/generated based of the existing columns because we believe we can use the information better\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c5c1b86-6441-4d7b-a951-a03d97db4701",
   "metadata": {},
   "source": [
    "### Season Released Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5cf11e23-6092-43aa-9bda-a30e57b8d44f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "      <th>season_released</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>8.4</td>\n",
       "      <td>927000.0</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>146.0</td>\n",
       "      <td>summer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>5.8</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>104.0</td>\n",
       "      <td>summer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1200000.0</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>538375067.0</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>124.0</td>\n",
       "      <td>summer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>7.7</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>88.0</td>\n",
       "      <td>summer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>7.3</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>98.0</td>\n",
       "      <td>summer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name rating      genre  year  \\\n",
       "0                                     The Shining      R      Drama  1980   \n",
       "1                                 The Blue Lagoon      R  Adventure  1980   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     PG     Action  1980   \n",
       "3                                       Airplane!     PG     Comedy  1980   \n",
       "4                                      Caddyshack      R     Comedy  1980   \n",
       "\n",
       "                        released  score      votes         director  \\\n",
       "0  June 13, 1980 (United States)    8.4   927000.0  Stanley Kubrick   \n",
       "1   July 2, 1980 (United States)    5.8    65000.0   Randal Kleiser   \n",
       "2  June 20, 1980 (United States)    8.7  1200000.0   Irvin Kershner   \n",
       "3   July 2, 1980 (United States)    7.7   221000.0     Jim Abrahams   \n",
       "4  July 25, 1980 (United States)    7.3   108000.0     Harold Ramis   \n",
       "\n",
       "                    writer            star         country      budget  \\\n",
       "0             Stephen King  Jack Nicholson  United Kingdom  19000000.0   \n",
       "1  Henry De Vere Stacpoole  Brooke Shields   United States   4500000.0   \n",
       "2           Leigh Brackett     Mark Hamill   United States  18000000.0   \n",
       "3             Jim Abrahams     Robert Hays   United States   3500000.0   \n",
       "4       Brian Doyle-Murray     Chevy Chase   United States   6000000.0   \n",
       "\n",
       "         gross             company  runtime season_released  \n",
       "0   46998772.0        Warner Bros.    146.0          summer  \n",
       "1   58853106.0   Columbia Pictures    104.0          summer  \n",
       "2  538375067.0           Lucasfilm    124.0          summer  \n",
       "3   83453539.0  Paramount Pictures     88.0          summer  \n",
       "4   39846344.0      Orion Pictures     98.0          summer  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\" create a released seasons column. This column maps the released column, which is a date, to a new column \n",
    "    corresponding to the season the movie was released \n",
    "\"\"\"\n",
    "\n",
    "# Function to map month to season\n",
    "def map_month_to_season(month):\n",
    "    month_to_season = {\n",
    "        'January': 'winter',\n",
    "        'February': 'winter',\n",
    "        'March': 'spring',\n",
    "        'April': 'spring',\n",
    "        'May': 'spring',\n",
    "        'June': 'summer',\n",
    "        'July': 'summer',\n",
    "        'August': 'summer',\n",
    "        'September': 'autumn',\n",
    "        'October': 'autumn',\n",
    "        'November': 'autumn',\n",
    "        'December': 'winter'\n",
    "    }\n",
    "    return month_to_season.get(month, 'unknown')\n",
    "\n",
    "# Extract the month from the \"released\" column\n",
    "df['month_released'] = df['released'].str.split(' ').str[0]\n",
    "\n",
    "# Create the \"season_released\" column, map the month to a season\n",
    "df['season_released'] = df['month_released'].apply(map_month_to_season)\n",
    "\n",
    "# Drop the temporary \"month_released\" column\n",
    "df = df.drop(columns=['month_released'])\n",
    "\n",
    "# Display the DataFrame\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cf16ae-b0d4-43f1-8208-c1f1ed830e88",
   "metadata": {},
   "source": [
    "### Profit ( Gross Income - Budget ) Column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd4aa9d1-4621-4e20-a0ba-b12989881ba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "      <th>season_released</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>8.4</td>\n",
       "      <td>927000.0</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>146.0</td>\n",
       "      <td>summer</td>\n",
       "      <td>27998772.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>5.8</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>104.0</td>\n",
       "      <td>summer</td>\n",
       "      <td>54353106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>1980</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1200000.0</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>538375067.0</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>124.0</td>\n",
       "      <td>summer</td>\n",
       "      <td>520375067.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>7.7</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>88.0</td>\n",
       "      <td>summer</td>\n",
       "      <td>79953539.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>7.3</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>98.0</td>\n",
       "      <td>summer</td>\n",
       "      <td>33846344.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name rating      genre  year  \\\n",
       "0                                     The Shining      R      Drama  1980   \n",
       "1                                 The Blue Lagoon      R  Adventure  1980   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     PG     Action  1980   \n",
       "3                                       Airplane!     PG     Comedy  1980   \n",
       "4                                      Caddyshack      R     Comedy  1980   \n",
       "\n",
       "                        released  score      votes         director  \\\n",
       "0  June 13, 1980 (United States)    8.4   927000.0  Stanley Kubrick   \n",
       "1   July 2, 1980 (United States)    5.8    65000.0   Randal Kleiser   \n",
       "2  June 20, 1980 (United States)    8.7  1200000.0   Irvin Kershner   \n",
       "3   July 2, 1980 (United States)    7.7   221000.0     Jim Abrahams   \n",
       "4  July 25, 1980 (United States)    7.3   108000.0     Harold Ramis   \n",
       "\n",
       "                    writer            star         country      budget  \\\n",
       "0             Stephen King  Jack Nicholson  United Kingdom  19000000.0   \n",
       "1  Henry De Vere Stacpoole  Brooke Shields   United States   4500000.0   \n",
       "2           Leigh Brackett     Mark Hamill   United States  18000000.0   \n",
       "3             Jim Abrahams     Robert Hays   United States   3500000.0   \n",
       "4       Brian Doyle-Murray     Chevy Chase   United States   6000000.0   \n",
       "\n",
       "         gross             company  runtime season_released       profit  \n",
       "0   46998772.0        Warner Bros.    146.0          summer   27998772.0  \n",
       "1   58853106.0   Columbia Pictures    104.0          summer   54353106.0  \n",
       "2  538375067.0           Lucasfilm    124.0          summer  520375067.0  \n",
       "3   83453539.0  Paramount Pictures     88.0          summer   79953539.0  \n",
       "4   39846344.0      Orion Pictures     98.0          summer   33846344.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['profit'] = (df['gross'] - df['budget'])\n",
    "\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f2b25a-b3ac-4413-9644-0b284ab2a7b6",
   "metadata": {},
   "source": [
    "### Covid flag Column ( If a movie was released during covid )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "27d20246-9468-413f-8efd-e8874beae7a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "start_year = 2020\n",
    "end_year = 2024\n",
    "\n",
    "df['covid_year'] = df['year'].apply(lambda x: start_year <= x <= end_year if pd.notnull(x) else False)\n",
    "\n",
    "# Convert the boolean values to a more readable format\n",
    "df['covid_year'] = df['covid_year'].map({True: 'Yes', False: 'No'})\n",
    "df['covid_year'] = df['covid_year'].fillna(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d02dc0e3-82cf-40f8-a175-a8c65c9c372f",
   "metadata": {},
   "source": [
    "## Data Quality Report\n",
    "\n",
    "This gives detailed informataion about our features and splits them into categorical and continuous features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "802d3611-5ac4-4abd-a0f7-78950ed0d662",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Continuous Features Data Quality Report:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/6l/vnzx2y7d799_5v6dvgg3m5xh0000gn/T/ipykernel_20527/2023415672.py:43: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  data_str = data.applymap(str)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Count</th>\n",
       "      <th>% of Missing</th>\n",
       "      <th>Count of ?</th>\n",
       "      <th>Card.</th>\n",
       "      <th>Min.</th>\n",
       "      <th>Q1</th>\n",
       "      <th>Median</th>\n",
       "      <th>Q3</th>\n",
       "      <th>Max.</th>\n",
       "      <th>Mean</th>\n",
       "      <th>Std. Dev.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>profit</th>\n",
       "      <td>profit</td>\n",
       "      <td>5436</td>\n",
       "      <td>29.11</td>\n",
       "      <td>2232</td>\n",
       "      <td>5436</td>\n",
       "      <td>-158031147.0</td>\n",
       "      <td>-3177509.0</td>\n",
       "      <td>13766118.0</td>\n",
       "      <td>70175840.5</td>\n",
       "      <td>2610246203.0</td>\n",
       "      <td>67065820.50</td>\n",
       "      <td>158818096.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>budget</td>\n",
       "      <td>5497</td>\n",
       "      <td>28.31</td>\n",
       "      <td>2171</td>\n",
       "      <td>413</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>20500000.0</td>\n",
       "      <td>45000000.0</td>\n",
       "      <td>356000000.0</td>\n",
       "      <td>35589876.19</td>\n",
       "      <td>41457296.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gross</th>\n",
       "      <td>gross</td>\n",
       "      <td>7479</td>\n",
       "      <td>2.46</td>\n",
       "      <td>189</td>\n",
       "      <td>7472</td>\n",
       "      <td>309.0</td>\n",
       "      <td>4532055.5</td>\n",
       "      <td>20205757.0</td>\n",
       "      <td>76016691.5</td>\n",
       "      <td>2847246203.0</td>\n",
       "      <td>78500541.02</td>\n",
       "      <td>165725124.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>runtime</td>\n",
       "      <td>7664</td>\n",
       "      <td>0.05</td>\n",
       "      <td>4</td>\n",
       "      <td>138</td>\n",
       "      <td>55.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>366.0</td>\n",
       "      <td>107.26</td>\n",
       "      <td>18.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>score</td>\n",
       "      <td>7665</td>\n",
       "      <td>0.04</td>\n",
       "      <td>3</td>\n",
       "      <td>72</td>\n",
       "      <td>1.9</td>\n",
       "      <td>5.8</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7.1</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.39</td>\n",
       "      <td>0.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>votes</th>\n",
       "      <td>votes</td>\n",
       "      <td>7665</td>\n",
       "      <td>0.04</td>\n",
       "      <td>3</td>\n",
       "      <td>936</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9100.0</td>\n",
       "      <td>33000.0</td>\n",
       "      <td>93000.0</td>\n",
       "      <td>2400000.0</td>\n",
       "      <td>88108.50</td>\n",
       "      <td>163323.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>year</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>2000.41</td>\n",
       "      <td>11.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Feature  Count % of Missing  Count of ?  Card.         Min.  \\\n",
       "profit    profit   5436        29.11        2232   5436 -158031147.0   \n",
       "budget    budget   5497        28.31        2171    413       3000.0   \n",
       "gross      gross   7479         2.46         189   7472        309.0   \n",
       "runtime  runtime   7664         0.05           4    138         55.0   \n",
       "score      score   7665         0.04           3     72          1.9   \n",
       "votes      votes   7665         0.04           3    936          7.0   \n",
       "year        year   7668          0.0           0     41       1980.0   \n",
       "\n",
       "                 Q1      Median          Q3          Max.         Mean  \\\n",
       "profit   -3177509.0  13766118.0  70175840.5  2610246203.0  67065820.50   \n",
       "budget   10000000.0  20500000.0  45000000.0   356000000.0  35589876.19   \n",
       "gross     4532055.5  20205757.0  76016691.5  2847246203.0  78500541.02   \n",
       "runtime        95.0       104.0       116.0         366.0       107.26   \n",
       "score           5.8         6.5         7.1           9.3         6.39   \n",
       "votes        9100.0     33000.0     93000.0     2400000.0     88108.50   \n",
       "year         1991.0      2000.0      2010.0        2020.0      2000.41   \n",
       "\n",
       "            Std. Dev.  \n",
       "profit   158818096.74  \n",
       "budget     41457296.6  \n",
       "gross    165725124.32  \n",
       "runtime         18.58  \n",
       "score            0.97  \n",
       "votes       163323.76  \n",
       "year            11.15  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.max_columns', None)\n",
    "\n",
    "continuous_features = df.select_dtypes(include=['Int64','float'])\n",
    "categorical_features = df.select_dtypes(include='object')\n",
    "\n",
    "def identify_missing_values(data):\n",
    "    if data.dtypes.any() in ['int64', 'float64']:\n",
    "        missing_values_count = data.isnull().sum()\n",
    "    \n",
    "    else:\n",
    "        missing_values_count = data.isnull().sum() + (data == ' ').sum() + (data == 'NaN').sum()\n",
    "    return missing_values_count\n",
    "\n",
    "\n",
    "def continuous_data_report(data, description_data):\n",
    "    missing_values_count = identify_missing_values(data)\n",
    "\n",
    "    report = pd.DataFrame({\n",
    "        'Feature': data.columns,\n",
    "        'Count': data.count(),\n",
    "        '% of Missing': missing_values_count / len(data) * 100, \n",
    "        'Count of ?': missing_values_count,\n",
    "        'Card.': data.nunique(),\n",
    "        'Min.': data.min(),\n",
    "        'Q1': data.quantile(0.25),\n",
    "        'Median': data.median(),\n",
    "        'Q3': data.quantile(0.75),\n",
    "        'Max.': data.max(),\n",
    "        'Mean': data.mean().round(2),\n",
    "        'Std. Dev.': data.std(),\n",
    "    })\n",
    "    report['% of Missing'] = report['% of Missing'].astype(str).astype(float).round(2).astype(str)\n",
    "    report['Max.'] = report['Max.'].astype(str).astype(float).round(2).astype(str)\n",
    "    report['Std. Dev.'] = report['Std. Dev.'].astype(str).astype(float).round(2).astype(str)\n",
    "    \n",
    "    return report\n",
    "\n",
    "\n",
    "def categorical_data_report(data, description_data):\n",
    "    missing_values_count = identify_missing_values(data)\n",
    "\n",
    "    data_str = data.applymap(str)\n",
    "\n",
    "    mode = data_str.mode().iloc[0]\n",
    "    mode_freq = data_str[data_str == mode].count()\n",
    "    mode_perc = (mode_freq / len(data_str)) * 100\n",
    "\n",
    "    value_counts = data_str.value_counts()\n",
    "    \n",
    "    \n",
    "\n",
    "    if len(value_counts) > 1:\n",
    "        mode = value_counts.index[0]\n",
    "        mode_freq = value_counts.iloc[0]\n",
    "        mode_perc = (mode_freq / len(data_str)) * 100\n",
    "\n",
    "        data_without_mode = data_str[data_str != mode]\n",
    "        \n",
    "        second_mode = data_without_mode.mode().iloc[0]\n",
    "        second_mode_freq = data_without_mode[data_without_mode == second_mode].count()\n",
    "        second_mode_perc = (second_mode_freq / len(data_without_mode)) * 100\n",
    "        \n",
    "    else:\n",
    "        mode = None\n",
    "        mode_freq = None\n",
    "        mode_perc = None\n",
    "        second_mode = None\n",
    "        second_mode_freq = None\n",
    "        second_mode_perc = None\n",
    "\n",
    "    report = pd.DataFrame({\n",
    "        'Feature': data.columns,\n",
    "        'Count': len(data_str),\n",
    "        '% of Missing': missing_values_count / len(data_str) * 100, \n",
    "        'Count of ?': missing_values_count,     \n",
    "        'Card.': data_str.nunique(),\n",
    "        'Mode': mode,\n",
    "        'Mode Freq.': mode_freq,\n",
    "        'Mode %': mode_perc,\n",
    "        '2nd Mode': second_mode,\n",
    "        '2nd Mode Freq.': second_mode_freq,\n",
    "        '2nd Mode Perc': second_mode_perc,\n",
    "    })\n",
    "    report['2nd Mode Perc'] = report['2nd Mode Perc'].astype(str).astype(float).round(5).astype(str)\n",
    "    report['% of Missing'] = report['% of Missing'].astype(str).astype(float).round(2).astype(str)\n",
    "    return report\n",
    "\n",
    "missing_continuous_values = identify_missing_values(continuous_features)\n",
    "missing_categorical_values = identify_missing_values(categorical_features)\n",
    "\n",
    "continuous_report = continuous_data_report(continuous_features, df)\n",
    "categorical_report = categorical_data_report(categorical_features, df)\n",
    "\n",
    "print(\"Continuous Features Data Quality Report:\")\n",
    "continuous_report.sort_values(by='% of Missing', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "71f44134-3495-48e5-a64c-f6817e9f8a9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Categorical Features Data Quality Report:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Count</th>\n",
       "      <th>% of Missing</th>\n",
       "      <th>Count of ?</th>\n",
       "      <th>Card.</th>\n",
       "      <th>Mode</th>\n",
       "      <th>Mode Freq.</th>\n",
       "      <th>Mode %</th>\n",
       "      <th>2nd Mode</th>\n",
       "      <th>2nd Mode Freq.</th>\n",
       "      <th>2nd Mode Perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>rating</th>\n",
       "      <td>rating</td>\n",
       "      <td>7668</td>\n",
       "      <td>1.0</td>\n",
       "      <td>77</td>\n",
       "      <td>13</td>\n",
       "      <td>R</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>2112</td>\n",
       "      <td>27.54304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>company</th>\n",
       "      <td>company</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.22</td>\n",
       "      <td>17</td>\n",
       "      <td>2386</td>\n",
       "      <td>Film 4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>377</td>\n",
       "      <td>4.91654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>writer</th>\n",
       "      <td>writer</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.04</td>\n",
       "      <td>3</td>\n",
       "      <td>4536</td>\n",
       "      <td>Gregory Burke</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Woody Allen</td>\n",
       "      <td>37</td>\n",
       "      <td>0.48252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <td>country</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.04</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>United States</td>\n",
       "      <td>5475</td>\n",
       "      <td>71.40063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>released</th>\n",
       "      <td>released</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2</td>\n",
       "      <td>3415</td>\n",
       "      <td>October 10, 2014 (United Kingdom)</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>February 14, 1986 (United States)</td>\n",
       "      <td>9</td>\n",
       "      <td>0.11737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>star</th>\n",
       "      <td>star</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.01</td>\n",
       "      <td>1</td>\n",
       "      <td>2815</td>\n",
       "      <td>Jack O'Connell</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Nicolas Cage</td>\n",
       "      <td>43</td>\n",
       "      <td>0.56077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>name</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7512</td>\n",
       "      <td>'71</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Anna</td>\n",
       "      <td>3</td>\n",
       "      <td>0.03912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genre</th>\n",
       "      <td>genre</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>Action</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>2245</td>\n",
       "      <td>29.27752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director</th>\n",
       "      <td>director</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2949</td>\n",
       "      <td>Yann Demange</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Woody Allen</td>\n",
       "      <td>38</td>\n",
       "      <td>0.49557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>season_released</th>\n",
       "      <td>season_released</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>autumn</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>spring</td>\n",
       "      <td>1912</td>\n",
       "      <td>24.93479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_year</th>\n",
       "      <td>covid_year</td>\n",
       "      <td>7668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>Yes</td>\n",
       "      <td>25</td>\n",
       "      <td>0.32603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Feature  Count % of Missing  Count of ?  Card.  \\\n",
       "rating                    rating   7668          1.0          77     13   \n",
       "company                  company   7668         0.22          17   2386   \n",
       "writer                    writer   7668         0.04           3   4536   \n",
       "country                  country   7668         0.04           3     60   \n",
       "released                released   7668         0.03           2   3415   \n",
       "star                        star   7668         0.01           1   2815   \n",
       "name                        name   7668          0.0           0   7512   \n",
       "genre                      genre   7668          0.0           0     19   \n",
       "director                director   7668          0.0           0   2949   \n",
       "season_released  season_released   7668          0.0           0      5   \n",
       "covid_year            covid_year   7668          0.0           0      2   \n",
       "\n",
       "                                              Mode  Mode Freq.    Mode %  \\\n",
       "rating                                           R           1  0.013041   \n",
       "company                                     Film 4           1  0.013041   \n",
       "writer                               Gregory Burke           1  0.013041   \n",
       "country                             United Kingdom           1  0.013041   \n",
       "released         October 10, 2014 (United Kingdom)           1  0.013041   \n",
       "star                                Jack O'Connell           1  0.013041   \n",
       "name                                           '71           1  0.013041   \n",
       "genre                                       Action           1  0.013041   \n",
       "director                              Yann Demange           1  0.013041   \n",
       "season_released                             autumn           1  0.013041   \n",
       "covid_year                                      No           1  0.013041   \n",
       "\n",
       "                                          2nd Mode  2nd Mode Freq.  \\\n",
       "rating                                       PG-13            2112   \n",
       "company                         Universal Pictures             377   \n",
       "writer                                 Woody Allen              37   \n",
       "country                              United States            5475   \n",
       "released         February 14, 1986 (United States)               9   \n",
       "star                                  Nicolas Cage              43   \n",
       "name                                          Anna               3   \n",
       "genre                                       Comedy            2245   \n",
       "director                               Woody Allen              38   \n",
       "season_released                             spring            1912   \n",
       "covid_year                                     Yes              25   \n",
       "\n",
       "                2nd Mode Perc  \n",
       "rating               27.54304  \n",
       "company               4.91654  \n",
       "writer                0.48252  \n",
       "country              71.40063  \n",
       "released              0.11737  \n",
       "star                  0.56077  \n",
       "name                  0.03912  \n",
       "genre                29.27752  \n",
       "director              0.49557  \n",
       "season_released      24.93479  \n",
       "covid_year            0.32603  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"\\nCategorical Features Data Quality Report:\")\n",
    "categorical_report.sort_values(by='% of Missing', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "11384ba7-641a-4596-9256-309e3e91751a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/6l/vnzx2y7d799_5v6dvgg3m5xh0000gn/T/ipykernel_20527/1012653977.py:1: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  pd.reset_option('all')\n"
     ]
    }
   ],
   "source": [
    "pd.reset_option('all')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bab56903-b2d9-4f2e-8bc4-1007030e7086",
   "metadata": {},
   "source": [
    "## Charts ( Histograms and Barcharts )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5027de24-3288-41ee-ac17-0670df31ec36",
   "metadata": {},
   "outputs": [],
   "source": [
    "# col_list = continuous_report['Feature']\n",
    "\n",
    "# num_plots = len(col_list)\n",
    "# num_rows = 3\n",
    "# num_cols = 4\n",
    "\n",
    "# fig, ax = plt.subplots(num_rows, num_cols, figsize=(18, 18))\n",
    "\n",
    "# for i in range(min(num_plots, num_rows * num_cols)):\n",
    "#     row_idx = i // num_cols\n",
    "#     col_idx = i % num_cols\n",
    "#     feature = col_list[i]\n",
    "    \n",
    "    \n",
    "#     ax[row_idx, col_idx].hist(continuous_features[feature], bins=10, alpha=0.7, color='yellow', edgecolor='black')  \n",
    "    \n",
    "#     ax[row_idx, col_idx].set_title(feature)\n",
    "\n",
    "# for i in range(num_plots, num_rows * num_cols):\n",
    "#     row_idx = i // num_cols\n",
    "#     col_idx = i % num_cols\n",
    "#     ax[row_idx, col_idx].axis('off')\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "565f32aa-c27e-4154-bd5b-e021e4bb3f21",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for feature in categorical_features.columns:\n",
    "#     plt.figure(figsize=(10, 6))\n",
    "#     ax = sns.countplot(x=feature, data=categorical_features)\n",
    "#     ax.tick_params(axis='x', labelrotation=90)\n",
    "#     plt.title(f'Count of {feature}')\n",
    "#     plt.xlabel(feature)\n",
    "#     plt.ylabel('Count')\n",
    "#     plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f829fca5-ec35-4364-afaf-89751520abd7",
   "metadata": {},
   "source": [
    "## Missing Values and Outliers\n",
    "\n",
    "##### For each continuous feature, identify the outliers using the IQR method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "abd77916-2b25-4b81-a567-ceb1c2cf6e6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of outliers:\n",
      "year         0\n",
      "score      119\n",
      "votes      803\n",
      "budget     445\n",
      "gross      851\n",
      "runtime    240\n",
      "profit     591\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>runtime</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.4</td>\n",
       "      <td>927000.0</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>27998772.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1980</td>\n",
       "      <td>5.8</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>54353106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1200000.0</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>538375067.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>520375067.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.7</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>79953539.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.3</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>33846344.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7663</th>\n",
       "      <td>2020</td>\n",
       "      <td>3.1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7664</th>\n",
       "      <td>2020</td>\n",
       "      <td>4.7</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7665</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.7</td>\n",
       "      <td>29.0</td>\n",
       "      <td>58750.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7666</th>\n",
       "      <td>2020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.7</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7668 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year  score      votes      budget        gross  runtime       profit\n",
       "0     1980    8.4   927000.0  19000000.0   46998772.0    146.0   27998772.0\n",
       "1     1980    5.8    65000.0   4500000.0   58853106.0    104.0   54353106.0\n",
       "2     1980    8.7  1200000.0  18000000.0  538375067.0    124.0  520375067.0\n",
       "3     1980    7.7   221000.0   3500000.0   83453539.0     88.0   79953539.0\n",
       "4     1980    7.3   108000.0   6000000.0   39846344.0     98.0   33846344.0\n",
       "...    ...    ...        ...         ...          ...      ...          ...\n",
       "7663  2020    3.1       18.0      7000.0          NaN     90.0          NaN\n",
       "7664  2020    4.7       36.0         NaN          NaN     90.0          NaN\n",
       "7665  2020    5.7       29.0     58750.0          NaN      NaN          NaN\n",
       "7666  2020    NaN        NaN     15000.0          NaN    120.0          NaN\n",
       "7667  2020    5.7        7.0         NaN          NaN    102.0          NaN\n",
       "\n",
       "[7668 rows x 7 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# your code goes here\n",
    "# Calculate Q1, Q3, and IQR\n",
    "Q1 = continuous_features.quantile(0.25)\n",
    "Q3 = continuous_features.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Calculate the lower and upper bounds for outliers\n",
    "lower_bound = Q1 -  1.5 * IQR\n",
    "upper_bound = Q3 +  1.5 * IQR\n",
    "\n",
    "# Identify outliers\n",
    "outliers = continuous_features[(continuous_features < lower_bound) | (continuous_features > upper_bound)]\n",
    "\n",
    "# Report the number of outliers\n",
    "print(\"Number of outliers:\")\n",
    "print(outliers.count())\n",
    "\n",
    "df._get_numeric_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dbf95de-f17c-4985-bc61-0ad5c87d5d60",
   "metadata": {},
   "source": [
    "##### Replace the outlier values with upper bounds and lower bounds "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2199ff02-bc9d-450b-be26-b912a883c55f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of updated cells in year: 0\n",
      "Number of updated cells in score: 119\n",
      "Number of updated cells in votes: 803\n",
      "Number of updated cells in budget: 445\n",
      "Number of updated cells in gross: 851\n",
      "Number of updated cells in runtime: 240\n",
      "Number of updated cells in profit: 591\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>runtime</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.40</td>\n",
       "      <td>218850.0</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>2.799877e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1980</td>\n",
       "      <td>5.80</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>5.435311e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.70</td>\n",
       "      <td>218850.0</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>183243645.5</td>\n",
       "      <td>124.0</td>\n",
       "      <td>1.802059e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.70</td>\n",
       "      <td>218850.0</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>7.995354e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.30</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>3.384634e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7663</th>\n",
       "      <td>2020</td>\n",
       "      <td>3.85</td>\n",
       "      <td>18.0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7664</th>\n",
       "      <td>2020</td>\n",
       "      <td>4.70</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7665</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.70</td>\n",
       "      <td>29.0</td>\n",
       "      <td>58750.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7666</th>\n",
       "      <td>2020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.70</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7668 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year  score     votes      budget        gross  runtime        profit\n",
       "0     1980   8.40  218850.0  19000000.0   46998772.0    146.0  2.799877e+07\n",
       "1     1980   5.80   65000.0   4500000.0   58853106.0    104.0  5.435311e+07\n",
       "2     1980   8.70  218850.0  18000000.0  183243645.5    124.0  1.802059e+08\n",
       "3     1980   7.70  218850.0   3500000.0   83453539.0     88.0  7.995354e+07\n",
       "4     1980   7.30  108000.0   6000000.0   39846344.0     98.0  3.384634e+07\n",
       "...    ...    ...       ...         ...          ...      ...           ...\n",
       "7663  2020   3.85      18.0      7000.0          NaN     90.0           NaN\n",
       "7664  2020   4.70      36.0         NaN          NaN     90.0           NaN\n",
       "7665  2020   5.70      29.0     58750.0          NaN      NaN           NaN\n",
       "7666  2020    NaN       NaN     15000.0          NaN    120.0           NaN\n",
       "7667  2020   5.70       7.0         NaN          NaN    102.0           NaN\n",
       "\n",
       "[7668 rows x 7 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize a dictionary to store the number of updated cells for each column\n",
    "updated_cells = {col:  0 for col in continuous_features.columns}\n",
    "\n",
    "for column in continuous_features.columns:\n",
    "    # Calculate Q1, Q3, and IQR\n",
    "    Q1 = continuous_features[column].quantile(0.25)\n",
    "    Q3 = continuous_features[column].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    \n",
    "    # Calculate the lower and upper bounds for outliers\n",
    "    lower_bound = Q1 -  1.5 * IQR\n",
    "    upper_bound = Q3 +  1.5 * IQR\n",
    "    \n",
    "    # Identify outliers\n",
    "    outliers = continuous_features[column][(continuous_features[column] < lower_bound) | (continuous_features[column] > upper_bound)]\n",
    "    \n",
    "    # Count the number of outliers\n",
    "    updated_cells[column] = len(outliers)\n",
    "\n",
    "    # Apply the clamping method to replace outliers\n",
    "    continuous_features[column] = continuous_features[column].clip(lower=lower_bound, upper=upper_bound)\n",
    "    df[column] = df[column].clip(lower=lower_bound, upper=upper_bound)\n",
    "\n",
    "# Report the number of updated cells for each column\n",
    "for column, count in updated_cells.items():\n",
    "    print(f\"Number of updated cells in {column}: {count}\")\n",
    "\n",
    "# Display the updated DataFrame\n",
    "df._get_numeric_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f6189ae-615c-4a57-8e47-0e6a1ab08b14",
   "metadata": {},
   "source": [
    "##### For each continuous feature, identify the <b> missing values </b> & replace them with the mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7468301f-a46e-4e46-b9f6-69a9dc7f2cac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "year         0.0\n",
      "score       0.04\n",
      "votes       0.04\n",
      "budget     28.31\n",
      "gross       2.46\n",
      "runtime     0.05\n",
      "profit     29.11\n",
      "Name: % of Missing, dtype: object\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>runtime</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>218850.000000</td>\n",
       "      <td>1.900000e+07</td>\n",
       "      <td>4.699877e+07</td>\n",
       "      <td>146.000000</td>\n",
       "      <td>2.799877e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1980</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>65000.000000</td>\n",
       "      <td>4.500000e+06</td>\n",
       "      <td>5.885311e+07</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>5.435311e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1980</td>\n",
       "      <td>8.700000</td>\n",
       "      <td>218850.000000</td>\n",
       "      <td>1.800000e+07</td>\n",
       "      <td>1.832436e+08</td>\n",
       "      <td>124.000000</td>\n",
       "      <td>1.802059e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.700000</td>\n",
       "      <td>218850.000000</td>\n",
       "      <td>3.500000e+06</td>\n",
       "      <td>8.345354e+07</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>7.995354e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1980</td>\n",
       "      <td>7.300000</td>\n",
       "      <td>108000.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>3.984634e+07</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>3.384634e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7663</th>\n",
       "      <td>2020</td>\n",
       "      <td>3.850000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>7.000000e+03</td>\n",
       "      <td>5.068799e+07</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>4.179167e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7664</th>\n",
       "      <td>2020</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>3.147767e+07</td>\n",
       "      <td>5.068799e+07</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>4.179167e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7665</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.700000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>5.875000e+04</td>\n",
       "      <td>5.068799e+07</td>\n",
       "      <td>106.612213</td>\n",
       "      <td>4.179167e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7666</th>\n",
       "      <td>2020</td>\n",
       "      <td>6.399172</td>\n",
       "      <td>63480.526941</td>\n",
       "      <td>1.500000e+04</td>\n",
       "      <td>5.068799e+07</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>4.179167e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>2020</td>\n",
       "      <td>5.700000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>3.147767e+07</td>\n",
       "      <td>5.068799e+07</td>\n",
       "      <td>102.000000</td>\n",
       "      <td>4.179167e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7668 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year     score          votes        budget         gross     runtime  \\\n",
       "0     1980  8.400000  218850.000000  1.900000e+07  4.699877e+07  146.000000   \n",
       "1     1980  5.800000   65000.000000  4.500000e+06  5.885311e+07  104.000000   \n",
       "2     1980  8.700000  218850.000000  1.800000e+07  1.832436e+08  124.000000   \n",
       "3     1980  7.700000  218850.000000  3.500000e+06  8.345354e+07   88.000000   \n",
       "4     1980  7.300000  108000.000000  6.000000e+06  3.984634e+07   98.000000   \n",
       "...    ...       ...            ...           ...           ...         ...   \n",
       "7663  2020  3.850000      18.000000  7.000000e+03  5.068799e+07   90.000000   \n",
       "7664  2020  4.700000      36.000000  3.147767e+07  5.068799e+07   90.000000   \n",
       "7665  2020  5.700000      29.000000  5.875000e+04  5.068799e+07  106.612213   \n",
       "7666  2020  6.399172   63480.526941  1.500000e+04  5.068799e+07  120.000000   \n",
       "7667  2020  5.700000       7.000000  3.147767e+07  5.068799e+07  102.000000   \n",
       "\n",
       "            profit  \n",
       "0     2.799877e+07  \n",
       "1     5.435311e+07  \n",
       "2     1.802059e+08  \n",
       "3     7.995354e+07  \n",
       "4     3.384634e+07  \n",
       "...            ...  \n",
       "7663  4.179167e+07  \n",
       "7664  4.179167e+07  \n",
       "7665  4.179167e+07  \n",
       "7666  4.179167e+07  \n",
       "7667  4.179167e+07  \n",
       "\n",
       "[7668 rows x 7 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(continuous_report['% of Missing'])\n",
    "print() \n",
    "\n",
    "# As seen from the printed result from the above, there is no column with more than 50% missing values so we can input the mean\n",
    "for column in continuous_features.columns:\n",
    "    df[column].fillna(df[column].mean(), inplace=True)\n",
    "\n",
    "df._get_numeric_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3320ad1a-f160-47ed-bb67-4761bf301399",
   "metadata": {},
   "source": [
    "##### For each categorical feature, identify the <b> missing values </b> & replace them with the mode of the category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "61a9cdaa-5c5d-41c5-9bb2-f48ffbe5bb75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>released</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>company</th>\n",
       "      <th>season_released</th>\n",
       "      <th>covid_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7663</th>\n",
       "      <td>More to Life</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>October 23, 2020 (United States)</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Shannon Bond</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>autumn</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7664</th>\n",
       "      <td>Dream Round</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>February 7, 2020 (United States)</td>\n",
       "      <td>Dusty Dukatz</td>\n",
       "      <td>Lisa Huston</td>\n",
       "      <td>Michael Saquella</td>\n",
       "      <td>United States</td>\n",
       "      <td>Cactus Blue Entertainment</td>\n",
       "      <td>winter</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7665</th>\n",
       "      <td>Saving Mbango</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>April 27, 2020 (Cameroon)</td>\n",
       "      <td>Nkanya Nkwai</td>\n",
       "      <td>Lynno Lovert</td>\n",
       "      <td>Onyama Laura</td>\n",
       "      <td>United States</td>\n",
       "      <td>Embi Productions</td>\n",
       "      <td>spring</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7666</th>\n",
       "      <td>It's Just Us</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>October 1, 2020 (United States)</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>Christina Roz</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>autumn</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>Tee em el</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Horror</td>\n",
       "      <td>August 19, 2020 (United States)</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Siyabonga Mabaso</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>PK 65 Films</td>\n",
       "      <td>summer</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7668 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                name rating      genre  \\\n",
       "0                                        The Shining      R      Drama   \n",
       "1                                    The Blue Lagoon      R  Adventure   \n",
       "2     Star Wars: Episode V - The Empire Strikes Back     PG     Action   \n",
       "3                                          Airplane!     PG     Comedy   \n",
       "4                                         Caddyshack      R     Comedy   \n",
       "...                                              ...    ...        ...   \n",
       "7663                                    More to Life    NaN      Drama   \n",
       "7664                                     Dream Round    NaN     Comedy   \n",
       "7665                                   Saving Mbango    NaN      Drama   \n",
       "7666                                    It's Just Us    NaN      Drama   \n",
       "7667                                       Tee em el    NaN     Horror   \n",
       "\n",
       "                              released         director  \\\n",
       "0        June 13, 1980 (United States)  Stanley Kubrick   \n",
       "1         July 2, 1980 (United States)   Randal Kleiser   \n",
       "2        June 20, 1980 (United States)   Irvin Kershner   \n",
       "3         July 2, 1980 (United States)     Jim Abrahams   \n",
       "4        July 25, 1980 (United States)     Harold Ramis   \n",
       "...                                ...              ...   \n",
       "7663  October 23, 2020 (United States)    Joseph Ebanks   \n",
       "7664  February 7, 2020 (United States)     Dusty Dukatz   \n",
       "7665         April 27, 2020 (Cameroon)     Nkanya Nkwai   \n",
       "7666   October 1, 2020 (United States)    James Randall   \n",
       "7667   August 19, 2020 (United States)     Pereko Mosia   \n",
       "\n",
       "                       writer              star         country  \\\n",
       "0                Stephen King    Jack Nicholson  United Kingdom   \n",
       "1     Henry De Vere Stacpoole    Brooke Shields   United States   \n",
       "2              Leigh Brackett       Mark Hamill   United States   \n",
       "3                Jim Abrahams       Robert Hays   United States   \n",
       "4          Brian Doyle-Murray       Chevy Chase   United States   \n",
       "...                       ...               ...             ...   \n",
       "7663            Joseph Ebanks      Shannon Bond   United States   \n",
       "7664              Lisa Huston  Michael Saquella   United States   \n",
       "7665             Lynno Lovert      Onyama Laura   United States   \n",
       "7666            James Randall     Christina Roz   United States   \n",
       "7667             Pereko Mosia  Siyabonga Mabaso    South Africa   \n",
       "\n",
       "                        company season_released covid_year  \n",
       "0                  Warner Bros.          summer         No  \n",
       "1             Columbia Pictures          summer         No  \n",
       "2                     Lucasfilm          summer         No  \n",
       "3            Paramount Pictures          summer         No  \n",
       "4                Orion Pictures          summer         No  \n",
       "...                         ...             ...        ...  \n",
       "7663                        NaN          autumn        Yes  \n",
       "7664  Cactus Blue Entertainment          winter        Yes  \n",
       "7665           Embi Productions          spring        Yes  \n",
       "7666                        NaN          autumn        Yes  \n",
       "7667                PK 65 Films          summer        Yes  \n",
       "\n",
       "[7668 rows x 11 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(exclude=[np.number])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cb2a2c3c-6fe4-4250-a87f-bce57d4a73d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name                0.0\n",
      "rating              1.0\n",
      "genre               0.0\n",
      "released           0.03\n",
      "director            0.0\n",
      "writer             0.04\n",
      "star               0.01\n",
      "country            0.04\n",
      "company            0.22\n",
      "season_released     0.0\n",
      "covid_year          0.0\n",
      "Name: % of Missing, dtype: object\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>released</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>company</th>\n",
       "      <th>season_released</th>\n",
       "      <th>covid_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>summer</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7663</th>\n",
       "      <td>More to Life</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>October 23, 2020 (United States)</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Shannon Bond</td>\n",
       "      <td>United States</td>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>autumn</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7664</th>\n",
       "      <td>Dream Round</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>February 7, 2020 (United States)</td>\n",
       "      <td>Dusty Dukatz</td>\n",
       "      <td>Lisa Huston</td>\n",
       "      <td>Michael Saquella</td>\n",
       "      <td>United States</td>\n",
       "      <td>Cactus Blue Entertainment</td>\n",
       "      <td>winter</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7665</th>\n",
       "      <td>Saving Mbango</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>April 27, 2020 (Cameroon)</td>\n",
       "      <td>Nkanya Nkwai</td>\n",
       "      <td>Lynno Lovert</td>\n",
       "      <td>Onyama Laura</td>\n",
       "      <td>United States</td>\n",
       "      <td>Embi Productions</td>\n",
       "      <td>spring</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7666</th>\n",
       "      <td>It's Just Us</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>October 1, 2020 (United States)</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>Christina Roz</td>\n",
       "      <td>United States</td>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>autumn</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7667</th>\n",
       "      <td>Tee em el</td>\n",
       "      <td>R</td>\n",
       "      <td>Horror</td>\n",
       "      <td>August 19, 2020 (United States)</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Siyabonga Mabaso</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>PK 65 Films</td>\n",
       "      <td>summer</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7668 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                name rating      genre  \\\n",
       "0                                        The Shining      R      Drama   \n",
       "1                                    The Blue Lagoon      R  Adventure   \n",
       "2     Star Wars: Episode V - The Empire Strikes Back     PG     Action   \n",
       "3                                          Airplane!     PG     Comedy   \n",
       "4                                         Caddyshack      R     Comedy   \n",
       "...                                              ...    ...        ...   \n",
       "7663                                    More to Life      R      Drama   \n",
       "7664                                     Dream Round      R     Comedy   \n",
       "7665                                   Saving Mbango      R      Drama   \n",
       "7666                                    It's Just Us      R      Drama   \n",
       "7667                                       Tee em el      R     Horror   \n",
       "\n",
       "                              released         director  \\\n",
       "0        June 13, 1980 (United States)  Stanley Kubrick   \n",
       "1         July 2, 1980 (United States)   Randal Kleiser   \n",
       "2        June 20, 1980 (United States)   Irvin Kershner   \n",
       "3         July 2, 1980 (United States)     Jim Abrahams   \n",
       "4        July 25, 1980 (United States)     Harold Ramis   \n",
       "...                                ...              ...   \n",
       "7663  October 23, 2020 (United States)    Joseph Ebanks   \n",
       "7664  February 7, 2020 (United States)     Dusty Dukatz   \n",
       "7665         April 27, 2020 (Cameroon)     Nkanya Nkwai   \n",
       "7666   October 1, 2020 (United States)    James Randall   \n",
       "7667   August 19, 2020 (United States)     Pereko Mosia   \n",
       "\n",
       "                       writer              star         country  \\\n",
       "0                Stephen King    Jack Nicholson  United Kingdom   \n",
       "1     Henry De Vere Stacpoole    Brooke Shields   United States   \n",
       "2              Leigh Brackett       Mark Hamill   United States   \n",
       "3                Jim Abrahams       Robert Hays   United States   \n",
       "4          Brian Doyle-Murray       Chevy Chase   United States   \n",
       "...                       ...               ...             ...   \n",
       "7663            Joseph Ebanks      Shannon Bond   United States   \n",
       "7664              Lisa Huston  Michael Saquella   United States   \n",
       "7665             Lynno Lovert      Onyama Laura   United States   \n",
       "7666            James Randall     Christina Roz   United States   \n",
       "7667             Pereko Mosia  Siyabonga Mabaso    South Africa   \n",
       "\n",
       "                        company season_released covid_year  \n",
       "0                  Warner Bros.          summer         No  \n",
       "1             Columbia Pictures          summer         No  \n",
       "2                     Lucasfilm          summer         No  \n",
       "3            Paramount Pictures          summer         No  \n",
       "4                Orion Pictures          summer         No  \n",
       "...                         ...             ...        ...  \n",
       "7663         Universal Pictures          autumn        Yes  \n",
       "7664  Cactus Blue Entertainment          winter        Yes  \n",
       "7665           Embi Productions          spring        Yes  \n",
       "7666         Universal Pictures          autumn        Yes  \n",
       "7667                PK 65 Films          summer        Yes  \n",
       "\n",
       "[7668 rows x 11 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(categorical_report['% of Missing'])\n",
    "print() \n",
    "\n",
    "# As seen from the printed result from the above, there is no column with more than 50% missing values so we can input the mean\n",
    "for column in categorical_features.columns:\n",
    "    df[column].fillna(df[column].mode()[0], inplace=True)\n",
    "\n",
    "df.select_dtypes(exclude=[np.number])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3cae4c9-2ccd-4dff-8858-619ab4758e15",
   "metadata": {},
   "source": [
    "## Normalization\n",
    "\n",
    "##### normalize the data using minmax normalization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a2e08d9d-a9d3-433e-8a4b-5305c04d9ffc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3da6a441-678b-48fc-9e18-45febeec57ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "      <th>season_released</th>\n",
       "      <th>profit</th>\n",
       "      <th>covid_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>0.0</td>\n",
       "      <td>June 13, 1980 (United States)</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0.194847</td>\n",
       "      <td>0.256481</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>0.982143</td>\n",
       "      <td>summer</td>\n",
       "      <td>0.481254</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>0.0</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.296985</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.046124</td>\n",
       "      <td>0.321173</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>0.482143</td>\n",
       "      <td>summer</td>\n",
       "      <td>0.571074</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>0.0</td>\n",
       "      <td>June 20, 1980 (United States)</td>\n",
       "      <td>0.932692</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.184590</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>0.720238</td>\n",
       "      <td>summer</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>0.0</td>\n",
       "      <td>July 2, 1980 (United States)</td>\n",
       "      <td>0.740385</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.035868</td>\n",
       "      <td>0.455423</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>0.291667</td>\n",
       "      <td>summer</td>\n",
       "      <td>0.658324</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>0.0</td>\n",
       "      <td>July 25, 1980 (United States)</td>\n",
       "      <td>0.663462</td>\n",
       "      <td>0.493472</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.061510</td>\n",
       "      <td>0.217449</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>0.410714</td>\n",
       "      <td>summer</td>\n",
       "      <td>0.501183</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name rating      genre  year  \\\n",
       "0                                     The Shining      R      Drama   0.0   \n",
       "1                                 The Blue Lagoon      R  Adventure   0.0   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     PG     Action   0.0   \n",
       "3                                       Airplane!     PG     Comedy   0.0   \n",
       "4                                      Caddyshack      R     Comedy   0.0   \n",
       "\n",
       "                        released     score     votes         director  \\\n",
       "0  June 13, 1980 (United States)  0.875000  1.000000  Stanley Kubrick   \n",
       "1   July 2, 1980 (United States)  0.375000  0.296985   Randal Kleiser   \n",
       "2  June 20, 1980 (United States)  0.932692  1.000000   Irvin Kershner   \n",
       "3   July 2, 1980 (United States)  0.740385  1.000000     Jim Abrahams   \n",
       "4  July 25, 1980 (United States)  0.663462  0.493472     Harold Ramis   \n",
       "\n",
       "                    writer            star         country    budget  \\\n",
       "0             Stephen King  Jack Nicholson  United Kingdom  0.194847   \n",
       "1  Henry De Vere Stacpoole  Brooke Shields   United States  0.046124   \n",
       "2           Leigh Brackett     Mark Hamill   United States  0.184590   \n",
       "3             Jim Abrahams     Robert Hays   United States  0.035868   \n",
       "4       Brian Doyle-Murray     Chevy Chase   United States  0.061510   \n",
       "\n",
       "      gross             company   runtime season_released    profit covid_year  \n",
       "0  0.256481        Warner Bros.  0.982143          summer  0.481254         No  \n",
       "1  0.321173   Columbia Pictures  0.482143          summer  0.571074         No  \n",
       "2  1.000000           Lucasfilm  0.720238          summer  1.000000         No  \n",
       "3  0.455423  Paramount Pictures  0.291667          summer  0.658324         No  \n",
       "4  0.217449      Orion Pictures  0.410714          summer  0.501183         No  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for column in continuous_features.columns: \n",
    "    scaler = MinMaxScaler()\n",
    "\n",
    "    scaler.fit(df[[column]])\n",
    "\n",
    "    df[column] = scaler.transform(df[[column]])\n",
    "\n",
    "df.head()\n",
    "\n",
    "# notice all continuous values are between 0 and 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44345b7a-60ac-4d67-8a83-653b3c2272a0",
   "metadata": {},
   "source": [
    "# Project Implementations \n",
    "\n",
    "## Building Various Models of datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07589ff2-f37c-4c0a-aa6e-2bdb94fa510b",
   "metadata": {},
   "source": [
    "### Naive-Bayes Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "09a8d79d-e400-4e9a-97e0-2a857f1221dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import OrdinalEncoder, StandardScaler, LabelEncoder\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eaac7f1-b503-4ddd-9454-4eaaa09ab665",
   "metadata": {},
   "source": [
    "### Define the functions to be used for <i><b>BONUS QUESTIONS</b></i>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1ab794e8-a260-4b86-b140-d044b4640486",
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_selection_by_correlation(df, target_column, num_features=10):\n",
    "    \"\"\"\n",
    "    Selects the top num_features features based on their correlation with the target_column.\n",
    "    \"\"\"\n",
    "    correlation_matrix = df.corr().abs()\n",
    "    target_correlation = correlation_matrix[target_column]\n",
    "    features_ranked_by_correlation = target_correlation.sort_values(ascending=False)\n",
    "    selected_features = features_ranked_by_correlation[1:num_features+1].index #add 1 to skip target feature\n",
    "    return selected_features\n",
    "\n",
    "def hyper_parameter_optimization(X, y, model, param_grid):\n",
    "    \"\"\"\n",
    "    Performs hyper-parameter optimization using GridSearchCV.\n",
    "    \"\"\"\n",
    "    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)\n",
    "    grid_search.fit(X, y)\n",
    "    return grid_search.best_params_\n",
    "\n",
    "def train_model(X, y, model, params):\n",
    "    \"\"\"\n",
    "    Trains the model with the given parameters.\n",
    "    \"\"\"\n",
    "    model.set_params(**params)\n",
    "    model.fit(X, y)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de1b27cd-8798-4a16-853c-7a312c1afa49",
   "metadata": {},
   "source": [
    "#### encode the Categorical descriptive features and target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "523ba5dd-f87c-4624-86f6-a1b3a0140c64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writer uniqueness = 0.5914188836724048\n"
     ]
    }
   ],
   "source": [
    "# Select relevant features\n",
    "features = ['rating', 'genre', 'year', 'released', 'score', 'director', 'star', 'country', 'budget', 'gross', 'company', 'runtime', 'profit', 'covid_year']\n",
    "target = 'season_released'\n",
    "# use these columns for now\n",
    "# ['name', 'votes', 'writer'] columns aren't used because they might not be useful. 'writer is not used becase it has too little unique values \n",
    "print( \"writer uniqueness =\", len(df['writer'].unique())/len(df['writer'])) \n",
    "\n",
    "# Encode categorical features\n",
    "encoder = OrdinalEncoder()\n",
    "df[features] = encoder.fit_transform(df[features])\n",
    "\n",
    "# Encode the target feature \n",
    "le = LabelEncoder()\n",
    "df[target] = le.fit_transform(df[target])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32a11ec7-a33d-4417-bd87-94cb983ace6e",
   "metadata": {},
   "source": [
    "#### Feature Selection using Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "24550ff4-f795-45b6-bf50-cdd4b943c7f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['released', 'gross', 'runtime', 'budget', 'profit', 'genre', 'star',\n",
       "       'score', 'director', 'country'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# update relevant features\n",
    "concatenated_df = pd.concat([df[features], df[target]], axis=1) #add the target column back\n",
    "features = feature_selection_by_correlation(concatenated_df, 'season_released', num_features=10)\n",
    "features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5c389c7-e21c-4a9e-9290-09365d3323a7",
   "metadata": {},
   "source": [
    "#### Hyper Parameterization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e9ee8c8f-30a1-430e-a183-709b72a8928a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'var_smoothing': 0.001}\n"
     ]
    }
   ],
   "source": [
    "# Define the parameter grid for GaussianNB\n",
    "param_grid = {\n",
    "    'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1]\n",
    "}\n",
    "\n",
    "# Initialize GaussianNB\n",
    "clf = GaussianNB()\n",
    "\n",
    "# Get the best parameters\n",
    "best_params = hyper_parameter_optimization(df[features], df[target], clf, param_grid)\n",
    "print(best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "04f01bd3-1295-464d-9a82-ea4242ddad16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data\n",
    "X = df[features]\n",
    "y = df[target]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) #everything is encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a226dfa3-e361-477f-925e-a2b3b0e29611",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      1.00      0.97       400\n",
      "           1       0.73      0.79      0.76       388\n",
      "           2       0.77      0.73      0.75       386\n",
      "           3       0.00      0.00      0.00         4\n",
      "           4       0.99      0.91      0.95       356\n",
      "\n",
      "    accuracy                           0.85      1534\n",
      "   macro avg       0.69      0.68      0.68      1534\n",
      "weighted avg       0.85      0.85      0.85      1534\n",
      "\n",
      "Accuracy: 0.8527\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    }
   ],
   "source": [
    "# Train the model\n",
    "clf \n",
    "model = train_model(X_train, y_train, clf, best_params)\n",
    "\n",
    "# Making predictions\n",
    "y_pred_encoded = model.predict(X_test) #encoded predictions \n",
    "print(classification_report(y_test, y_pred_encoded)) # make classification report\n",
    "y_pred = le.inverse_transform(y_pred_encoded) #decoded predictions\n",
    "y_test = le.inverse_transform(y_test) #decoded tests\n",
    "\n",
    "# Evaluating the model\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "116724fa-d2e5-4c65-a9ad-fdb550e6a304",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[400   0   0   0   0]\n",
      " [ 27 305  56   0   0]\n",
      " [  0 104 280   0   2]\n",
      " [  0   3   0   0   1]\n",
      " [  0   4  29   0 323]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred) #decoded values\n",
    "print(f\"Confusion Matrix:\\n{conf_matrix}\")\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "disp = ConfusionMatrixDisplay(conf_matrix, display_labels=le.classes_) # Use the original labels for display\n",
    "disp.plot(ax=ax, cmap=plt.cm.Blues)\n",
    "disp.ax_.set_title(\"Confusion Matrix\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "744860c1-fccc-47e9-a931-1c587b0e5f92",
   "metadata": {},
   "source": [
    "### Decision Tree Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "abe37c9d-0f58-42f6-9ce5-69472521f228",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#import utility libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import tree\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier, plot_tree\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8fc0a7b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "      <th>season_released</th>\n",
       "      <th>profit</th>\n",
       "      <th>covid_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1705.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2589.0</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>1047.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>4974.0</td>\n",
       "      <td>2319.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3260.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1492.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.296985</td>\n",
       "      <td>2269.0</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>327.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>5275.0</td>\n",
       "      <td>731.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3841.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1771.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1111.0</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>1745.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>6622.0</td>\n",
       "      <td>1540.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4847.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1492.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1301.0</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>2246.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>5722.0</td>\n",
       "      <td>1812.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4202.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1543.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.493472</td>\n",
       "      <td>1054.0</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>410.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>4724.0</td>\n",
       "      <td>1777.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3424.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name  rating  genre  year  \\\n",
       "0                                     The Shining     6.0    6.0   0.0   \n",
       "1                                 The Blue Lagoon     6.0    1.0   0.0   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     4.0    0.0   0.0   \n",
       "3                                       Airplane!     4.0    4.0   0.0   \n",
       "4                                      Caddyshack     6.0    4.0   0.0   \n",
       "\n",
       "   released  score     votes  director                   writer    star  \\\n",
       "0    1705.0   47.0  1.000000    2589.0             Stephen King  1047.0   \n",
       "1    1492.0   20.0  0.296985    2269.0  Henry De Vere Stacpoole   327.0   \n",
       "2    1771.0   50.0  1.000000    1111.0           Leigh Brackett  1745.0   \n",
       "3    1492.0   40.0  1.000000    1301.0             Jim Abrahams  2246.0   \n",
       "4    1543.0   36.0  0.493472    1054.0       Brian Doyle-Murray   410.0   \n",
       "\n",
       "   country  budget   gross  company  runtime  season_released  profit  \\\n",
       "0     54.0   211.0  4974.0   2319.0     78.0                2  3260.0   \n",
       "1     55.0    98.0  5275.0    731.0     35.0                2  3841.0   \n",
       "2     55.0   207.0  6622.0   1540.0     56.0                2  4847.0   \n",
       "3     55.0    87.0  5722.0   1812.0     19.0                2  4202.0   \n",
       "4     55.0   115.0  4724.0   1777.0     29.0                2  3424.0   \n",
       "\n",
       "   covid_year  \n",
       "0         0.0  \n",
       "1         0.0  \n",
       "2         0.0  \n",
       "3         0.0  \n",
       "4         0.0  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4122e30e",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['rating', 'genre', 'year', 'released', 'score', 'director', 'star', 'country', 'budget', 'gross', 'company', 'runtime', 'profit', 'covid_year']\n",
    "target = 'season_released'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1638d5e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "\n",
    "categorical_columns = df.select_dtypes(include=['object']).columns\n",
    "\n",
    "for column in categorical_columns:\n",
    "    df[column] = le.fit_transform(df[column])\n",
    "\n",
    "selected_features = feature_selection_by_correlation(df, target, num_features=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d5c1f7c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[selected_features]\n",
    "y = df[target]\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bec1ad5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV, train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='mean')),  \n",
    "    ('classifier',  DecisionTreeClassifier(random_state=99))     \n",
    "])\n",
    "\n",
    "param_grid = {\n",
    "    'classifier__max_depth': [None, 10, 20, 30],\n",
    "    'classifier__min_samples_split': [2, 5, 10]\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(pipeline, param_grid, cv=5, n_jobs=-1)\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "\n",
    "trained_model = grid_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9b2887a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()),\n",
       "                (&#x27;classifier&#x27;, DecisionTreeClassifier(random_state=99))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;imputer&#x27;, SimpleImputer()),\n",
       "                (&#x27;classifier&#x27;, DecisionTreeClassifier(random_state=99))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=99)</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('imputer', SimpleImputer()),\n",
       "                ('classifier', DecisionTreeClassifier(random_state=99))])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = DecisionTreeClassifier(min_samples_split=20, random_state=99)\n",
    "\n",
    "pipeline.fit(X_train, y_train)\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8eb984b",
   "metadata": {},
   "source": [
    "Evaluation Metric: Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1efea73c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score: 0.9986962190352021\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "# Make predictions on the test set\n",
    "\n",
    "y_pred = pipeline.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy score:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ada75908",
   "metadata": {},
   "source": [
    "Visualization of Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cd699a63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier, plot_tree\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class_names = df[target].unique().astype(str)\n",
    "\n",
    "# Visualize the decision tree\n",
    "plt.figure(figsize=(15, 10))\n",
    "plot_tree(pipeline.named_steps['classifier'], filled=True, feature_names=features, class_names=class_names, rounded=True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67fda7fc",
   "metadata": {},
   "source": [
    "Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ef32003c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred = pipeline.predict(X_test)\n",
    "\n",
    "# Calculate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# White and blue gradient\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.colorbar()\n",
    "\n",
    "tick_marks = np.arange(len(class_names))\n",
    "plt.xticks(tick_marks, class_names, rotation=45)\n",
    "plt.yticks(tick_marks, class_names)\n",
    "\n",
    "# Text annotations\n",
    "thresh = cm.max() / 2.\n",
    "for i in range(cm.shape[0]):\n",
    "    for j in range(cm.shape[1]):\n",
    "        plt.text(j, i, format(cm[i, j], 'd'),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "plt.ylabel('True label')\n",
    "plt.xlabel('Predicted label')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5144c73-84b5-4125-b0fd-859a7b54f3fa",
   "metadata": {},
   "source": [
    "### Multinomial Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8685caf3-9ed5-4886-a4f3-fbc74a5d5d10",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cd42b18b-4fba-4a10-a3f5-f0f00b26ccdd",
   "metadata": {},
   "source": [
    "### K-Nearest Neighbors Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5111ce83-0f93-4fcb-a4d1-83c7f84b4242",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "995f6816-ab1e-4911-9cab-6f700b9dbf01",
   "metadata": {},
   "source": [
    "### Using Autogluon to tell what model works best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e6cfe490-a218-4870-bafc-4bf317dca992",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No path specified. Models will be saved in: \"AutogluonModels/ag-20240414_015109\"\n",
      "No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets.\n",
      "\tRecommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):\n",
      "\tpresets='best_quality'   : Maximize accuracy. Default time_limit=3600.\n",
      "\tpresets='high_quality'   : Strong accuracy with fast inference speed. Default time_limit=3600.\n",
      "\tpresets='good_quality'   : Good accuracy with very fast inference speed. Default time_limit=3600.\n",
      "\tpresets='medium_quality' : Fast training time, ideal for initial prototyping.\n",
      "Beginning AutoGluon training ... Time limit = 200s\n",
      "AutoGluon will save models to \"AutogluonModels/ag-20240414_015109\"\n",
      "=================== System Info ===================\n",
      "AutoGluon Version:  1.0.0\n",
      "Python Version:     3.10.4\n",
      "Operating System:   Darwin\n",
      "Platform Machine:   x86_64\n",
      "Platform Version:   Darwin Kernel Version 21.6.0: Mon Feb 19 20:24:34 PST 2024; root:xnu-8020.240.18.707.4~1/RELEASE_X86_64\n",
      "CPU Count:          8\n",
      "Memory Avail:       6.13 GB / 16.00 GB (38.3%)\n",
      "Disk Space Avail:   137.11 GB / 465.72 GB (29.4%)\n",
      "===================================================\n",
      "Train Data Rows:    7668\n",
      "Train Data Columns: 17\n",
      "Label Column:       season_released\n",
      "AutoGluon infers your prediction problem is: 'multiclass' (because dtype of label-column == int, but few unique label-values observed).\n",
      "\t5 unique label values:  [2, 1, 4, 0, 3]\n",
      "\tIf 'multiclass' is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression'])\n",
      "Problem Type:       multiclass\n",
      "Preprocessing data ...\n",
      "Train Data Class Count: 5\n",
      "Using Feature Generators to preprocess the data ...\n",
      "Fitting AutoMLPipelineFeatureGenerator...\n",
      "\tAvailable Memory:                    6281.24 MB\n",
      "\tTrain Data (Original)  Memory Usage: 0.99 MB (0.0% of available memory)\n",
      "\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n",
      "\tStage 1 Generators:\n",
      "\t\tFitting AsTypeFeatureGenerator...\n",
      "\t\t\tNote: Converting 1 features to boolean dtype as they only contain 2 unique values.\n",
      "\tStage 2 Generators:\n",
      "\t\tFitting FillNaFeatureGenerator...\n",
      "\tStage 3 Generators:\n",
      "\t\tFitting IdentityFeatureGenerator...\n",
      "\tStage 4 Generators:\n",
      "\t\tFitting DropUniqueFeatureGenerator...\n",
      "\tStage 5 Generators:\n",
      "\t\tFitting DropDuplicatesFeatureGenerator...\n",
      "\tTypes of features in original data (raw dtype, special dtypes):\n",
      "\t\t('float', []) : 15 | ['rating', 'genre', 'year', 'released', 'score', ...]\n",
      "\t\t('int', [])   :  2 | ['name', 'writer']\n",
      "\tTypes of features in processed data (raw dtype, special dtypes):\n",
      "\t\t('float', [])     : 14 | ['rating', 'genre', 'year', 'released', 'score', ...]\n",
      "\t\t('int', [])       :  2 | ['name', 'writer']\n",
      "\t\t('int', ['bool']) :  1 | ['covid_year']\n",
      "\t0.1s = Fit runtime\n",
      "\t17 features in original data used to generate 17 features in processed data.\n",
      "\tTrain Data (Processed) Memory Usage: 0.94 MB (0.0% of available memory)\n",
      "Data preprocessing and feature engineering runtime = 0.09s ...\n",
      "AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n",
      "\tTo change this, specify the eval_metric parameter of Predictor()\n",
      "Automatically generating train/validation split with holdout_frac=0.1, Train Rows: 6901, Val Rows: 767\n",
      "User-specified model hyperparameters to be fit:\n",
      "{\n",
      "\t'NN_TORCH': {},\n",
      "\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n",
      "\t'CAT': {},\n",
      "\t'XGB': {},\n",
      "\t'FASTAI': {},\n",
      "\t'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n",
      "}\n",
      "Fitting 13 L1 models ...\n",
      "Fitting model: KNeighborsUnif ... Training model for up to 199.91s of the 199.91s of remaining time.\n",
      "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/threadpoolctl.py:1186: RuntimeWarning: \n",
      "Found Intel OpenMP ('libiomp') and LLVM OpenMP ('libomp') loaded at\n",
      "the same time. Both libraries are known to be incompatible and this\n",
      "can cause random crashes or deadlocks on Linux when loaded in the\n",
      "same Python program.\n",
      "Using threadpoolctl may cause crashes or deadlocks. For more\n",
      "information and possible workarounds, please see\n",
      "    https://github.com/joblib/threadpoolctl/blob/master/multiple_openmp.md\n",
      "\n",
      "  warnings.warn(msg, RuntimeWarning)\n",
      "\t0.6154\t = Validation score   (accuracy)\n",
      "\t2.24s\t = Training   runtime\n",
      "\t0.09s\t = Validation runtime\n",
      "Fitting model: KNeighborsDist ... Training model for up to 197.57s of the 197.57s of remaining time.\n",
      "\t0.6454\t = Validation score   (accuracy)\n",
      "\t0.01s\t = Training   runtime\n",
      "\t0.02s\t = Validation runtime\n",
      "Fitting model: NeuralNetFastAI ... Training model for up to 197.52s of the 197.52s of remaining time.\n",
      "\t0.97\t = Validation score   (accuracy)\n",
      "\t8.05s\t = Training   runtime\n",
      "\t0.01s\t = Validation runtime\n",
      "Fitting model: LightGBMXT ... Training model for up to 189.44s of the 189.44s of remaining time.\n",
      "\tWarning: Exception caused LightGBMXT to fail during training (ImportError)... Skipping this model.\n",
      "\t\t`import lightgbm` failed. If you are using Mac OSX, Please try 'brew install libomp'. Detailed info: dlopen(/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so, 0x0006): Library not loaded: '/usr/local/opt/libomp/lib/libomp.dylib'\n",
      "  Referenced from: '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so'\n",
      "  Reason: tried: '/usr/local/opt/libomp/lib/libomp.dylib' (no such file), '/usr/lib/libomp.dylib' (no such file)\n",
      "Fitting model: LightGBM ... Training model for up to 189.04s of the 189.04s of remaining time.\n",
      "\tWarning: Exception caused LightGBM to fail during training (ImportError)... Skipping this model.\n",
      "\t\t`import lightgbm` failed. If you are using Mac OSX, Please try 'brew install libomp'. Detailed info: dlopen(/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so, 0x0006): Library not loaded: '/usr/local/opt/libomp/lib/libomp.dylib'\n",
      "  Referenced from: '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so'\n",
      "  Reason: tried: '/usr/local/opt/libomp/lib/libomp.dylib' (no such file), '/usr/lib/libomp.dylib' (no such file)\n",
      "Fitting model: RandomForestGini ... Training model for up to 188.9s of the 188.9s of remaining time.\n",
      "\t0.9922\t = Validation score   (accuracy)\n",
      "\t1.73s\t = Training   runtime\n",
      "\t0.06s\t = Validation runtime\n",
      "Fitting model: RandomForestEntr ... Training model for up to 186.86s of the 186.86s of remaining time.\n",
      "\t0.9948\t = Validation score   (accuracy)\n",
      "\t2.91s\t = Training   runtime\n",
      "\t0.11s\t = Validation runtime\n",
      "Fitting model: CatBoost ... Training model for up to 183.32s of the 183.32s of remaining time.\n",
      "\t0.9948\t = Validation score   (accuracy)\n",
      "\t2.88s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "Fitting model: ExtraTreesGini ... Training model for up to 180.44s of the 180.44s of remaining time.\n",
      "\t0.97\t = Validation score   (accuracy)\n",
      "\t1.14s\t = Training   runtime\n",
      "\t0.06s\t = Validation runtime\n",
      "Fitting model: ExtraTreesEntr ... Training model for up to 178.94s of the 178.94s of remaining time.\n",
      "\t0.9687\t = Validation score   (accuracy)\n",
      "\t1.22s\t = Training   runtime\n",
      "\t0.09s\t = Validation runtime\n",
      "Fitting model: XGBoost ... Training model for up to 177.33s of the 177.33s of remaining time.\n",
      "\t0.9974\t = Validation score   (accuracy)\n",
      "\t1.24s\t = Training   runtime\n",
      "\t0.01s\t = Validation runtime\n",
      "Fitting model: NeuralNetTorch ... Training model for up to 176.04s of the 176.03s of remaining time.\n",
      "\t0.9557\t = Validation score   (accuracy)\n",
      "\t14.36s\t = Training   runtime\n",
      "\t0.01s\t = Validation runtime\n",
      "Fitting model: LightGBMLarge ... Training model for up to 161.66s of the 161.66s of remaining time.\n",
      "\tWarning: Exception caused LightGBMLarge to fail during training (ImportError)... Skipping this model.\n",
      "\t\t`import lightgbm` failed. If you are using Mac OSX, Please try 'brew install libomp'. Detailed info: dlopen(/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so, 0x0006): Library not loaded: '/usr/local/opt/libomp/lib/libomp.dylib'\n",
      "  Referenced from: '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/lightgbm/lib/lib_lightgbm.so'\n",
      "  Reason: tried: '/usr/local/opt/libomp/lib/libomp.dylib' (no such file), '/usr/lib/libomp.dylib' (no such file)\n",
      "Fitting model: WeightedEnsemble_L2 ... Training model for up to 199.91s of the 161.47s of remaining time.\n",
      "\tEnsemble Weights: {'XGBoost': 1.0}\n",
      "\t0.9974\t = Validation score   (accuracy)\n",
      "\t0.74s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "AutoGluon training complete, total runtime = 39.31s ... Best model: \"WeightedEnsemble_L2\"\n",
      "TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels/ag-20240414_015109\")\n"
     ]
    }
   ],
   "source": [
    "from autogluon.tabular import TabularDataset, TabularPredictor\n",
    "train_data = TabularDataset(data=df)\n",
    "test_data = TabularDataset(data=df)\n",
    "predictor = TabularPredictor(label='season_released').fit(train_data, time_limit=200)  # Fit models for 120s\n",
    "leaderboard = predictor.leaderboard(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ba763352-f56d-4d91-b89d-b05d4ec81814",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>score_test</th>\n",
       "      <th>score_val</th>\n",
       "      <th>eval_metric</th>\n",
       "      <th>pred_time_test</th>\n",
       "      <th>pred_time_val</th>\n",
       "      <th>fit_time</th>\n",
       "      <th>pred_time_test_marginal</th>\n",
       "      <th>pred_time_val_marginal</th>\n",
       "      <th>fit_time_marginal</th>\n",
       "      <th>stack_level</th>\n",
       "      <th>can_infer</th>\n",
       "      <th>fit_order</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>0.999739</td>\n",
       "      <td>0.997392</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.099899</td>\n",
       "      <td>0.009331</td>\n",
       "      <td>1.239264</td>\n",
       "      <td>0.099899</td>\n",
       "      <td>0.009331</td>\n",
       "      <td>1.239264</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WeightedEnsemble_L2</td>\n",
       "      <td>0.999739</td>\n",
       "      <td>0.997392</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.103089</td>\n",
       "      <td>0.010463</td>\n",
       "      <td>1.981687</td>\n",
       "      <td>0.003190</td>\n",
       "      <td>0.001132</td>\n",
       "      <td>0.742423</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RandomForestEntr</td>\n",
       "      <td>0.999478</td>\n",
       "      <td>0.994785</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.167619</td>\n",
       "      <td>0.106125</td>\n",
       "      <td>2.911112</td>\n",
       "      <td>0.167619</td>\n",
       "      <td>0.106125</td>\n",
       "      <td>2.911112</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RandomForestGini</td>\n",
       "      <td>0.999218</td>\n",
       "      <td>0.992177</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.195690</td>\n",
       "      <td>0.063080</td>\n",
       "      <td>1.734008</td>\n",
       "      <td>0.195690</td>\n",
       "      <td>0.063080</td>\n",
       "      <td>1.734008</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ExtraTreesGini</td>\n",
       "      <td>0.997001</td>\n",
       "      <td>0.970013</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.235213</td>\n",
       "      <td>0.062190</td>\n",
       "      <td>1.138899</td>\n",
       "      <td>0.235213</td>\n",
       "      <td>0.062190</td>\n",
       "      <td>1.138899</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ExtraTreesEntr</td>\n",
       "      <td>0.996870</td>\n",
       "      <td>0.968709</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.255217</td>\n",
       "      <td>0.090107</td>\n",
       "      <td>1.220047</td>\n",
       "      <td>0.255217</td>\n",
       "      <td>0.090107</td>\n",
       "      <td>1.220047</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CatBoost</td>\n",
       "      <td>0.995175</td>\n",
       "      <td>0.994785</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.015203</td>\n",
       "      <td>0.003191</td>\n",
       "      <td>2.875157</td>\n",
       "      <td>0.015203</td>\n",
       "      <td>0.003191</td>\n",
       "      <td>2.875157</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NeuralNetFastAI</td>\n",
       "      <td>0.988393</td>\n",
       "      <td>0.970013</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.132221</td>\n",
       "      <td>0.013554</td>\n",
       "      <td>8.047243</td>\n",
       "      <td>0.132221</td>\n",
       "      <td>0.013554</td>\n",
       "      <td>8.047243</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NeuralNetTorch</td>\n",
       "      <td>0.976656</td>\n",
       "      <td>0.955671</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.043514</td>\n",
       "      <td>0.009956</td>\n",
       "      <td>14.355328</td>\n",
       "      <td>0.043514</td>\n",
       "      <td>0.009956</td>\n",
       "      <td>14.355328</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>KNeighborsDist</td>\n",
       "      <td>0.964528</td>\n",
       "      <td>0.645372</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.108576</td>\n",
       "      <td>0.023951</td>\n",
       "      <td>0.014361</td>\n",
       "      <td>0.108576</td>\n",
       "      <td>0.023951</td>\n",
       "      <td>0.014361</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>KNeighborsUnif</td>\n",
       "      <td>0.745827</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.119326</td>\n",
       "      <td>0.093565</td>\n",
       "      <td>2.240652</td>\n",
       "      <td>0.119326</td>\n",
       "      <td>0.093565</td>\n",
       "      <td>2.240652</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  model  score_test  score_val eval_metric  pred_time_test  \\\n",
       "0               XGBoost    0.999739   0.997392    accuracy        0.099899   \n",
       "1   WeightedEnsemble_L2    0.999739   0.997392    accuracy        0.103089   \n",
       "2      RandomForestEntr    0.999478   0.994785    accuracy        0.167619   \n",
       "3      RandomForestGini    0.999218   0.992177    accuracy        0.195690   \n",
       "4        ExtraTreesGini    0.997001   0.970013    accuracy        0.235213   \n",
       "5        ExtraTreesEntr    0.996870   0.968709    accuracy        0.255217   \n",
       "6              CatBoost    0.995175   0.994785    accuracy        0.015203   \n",
       "7       NeuralNetFastAI    0.988393   0.970013    accuracy        0.132221   \n",
       "8        NeuralNetTorch    0.976656   0.955671    accuracy        0.043514   \n",
       "9        KNeighborsDist    0.964528   0.645372    accuracy        0.108576   \n",
       "10       KNeighborsUnif    0.745827   0.615385    accuracy        0.119326   \n",
       "\n",
       "    pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n",
       "0        0.009331   1.239264                 0.099899                0.009331   \n",
       "1        0.010463   1.981687                 0.003190                0.001132   \n",
       "2        0.106125   2.911112                 0.167619                0.106125   \n",
       "3        0.063080   1.734008                 0.195690                0.063080   \n",
       "4        0.062190   1.138899                 0.235213                0.062190   \n",
       "5        0.090107   1.220047                 0.255217                0.090107   \n",
       "6        0.003191   2.875157                 0.015203                0.003191   \n",
       "7        0.013554   8.047243                 0.132221                0.013554   \n",
       "8        0.009956  14.355328                 0.043514                0.009956   \n",
       "9        0.023951   0.014361                 0.108576                0.023951   \n",
       "10       0.093565   2.240652                 0.119326                0.093565   \n",
       "\n",
       "    fit_time_marginal  stack_level  can_infer  fit_order  \n",
       "0            1.239264            1       True          9  \n",
       "1            0.742423            2       True         11  \n",
       "2            2.911112            1       True          5  \n",
       "3            1.734008            1       True          4  \n",
       "4            1.138899            1       True          7  \n",
       "5            1.220047            1       True          8  \n",
       "6            2.875157            1       True          6  \n",
       "7            8.047243            1       True          3  \n",
       "8           14.355328            1       True         10  \n",
       "9            0.014361            1       True          2  \n",
       "10           2.240652            1       True          1  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leaderboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09e6beb3-17b3-495f-b71e-d503ed5b1533",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
